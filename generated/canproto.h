/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Fri Jun  7 05:01:49 2024.
 */

#ifndef CANPROTO_H
#define CANPROTO_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CANPROTO_HEARTBEAT_FRAME_ID (0x0au)
#define CANPROTO_DO_WORK0_FRAME_ID (0x0bu)

/* Frame lengths in bytes. */
#define CANPROTO_HEARTBEAT_LENGTH (8u)
#define CANPROTO_DO_WORK0_LENGTH (8u)

/* Extended or standard frame types. */
#define CANPROTO_HEARTBEAT_IS_EXTENDED (0)
#define CANPROTO_DO_WORK0_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define CANPROTO_HEARTBEAT_NAME "Heartbeat"
#define CANPROTO_DO_WORK0_NAME "DoWork0"

/* Signal Names. */
#define CANPROTO_HEARTBEAT_SEQNUM_NAME "seqnum"
#define CANPROTO_HEARTBEAT_CAN1_ERROR_NAME "can1_error"
#define CANPROTO_HEARTBEAT_CAN2_ERROR_NAME "can2_error"
#define CANPROTO_HEARTBEAT_SHELL_ERROR_NAME "shell_error"
#define CANPROTO_HEARTBEAT_HW_TIMESTAMP_NAME "hw_timestamp"
#define CANPROTO_DO_WORK0_COUNTER_NAME "counter"

/**
 * Signals in message Heartbeat.
 *
 * All signal values are as on the CAN bus.
 */
struct canproto_heartbeat_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seqnum;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t can1_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t can2_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t shell_error;

    /**
     * hardware_timestamp
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hw_timestamp;
};

/**
 * Signals in message DoWork0.
 *
 * Invoke the worker0 stask
 *
 * All signal values are as on the CAN bus.
 */
struct canproto_do_work0_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter;
};

/**
 * Pack message Heartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canproto_heartbeat_pack(
    uint8_t *dst_p,
    const struct canproto_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message Heartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canproto_heartbeat_unpack(
    struct canproto_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Heartbeat.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int canproto_heartbeat_init(struct canproto_heartbeat_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canproto_heartbeat_seqnum_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canproto_heartbeat_can1_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canproto_heartbeat_can2_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canproto_heartbeat_shell_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canproto_heartbeat_hw_timestamp_is_in_range(uint16_t value);

/**
 * Pack message DoWork0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canproto_do_work0_pack(
    uint8_t *dst_p,
    const struct canproto_do_work0_t *src_p,
    size_t size);

/**
 * Unpack message DoWork0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canproto_do_work0_unpack(
    struct canproto_do_work0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DoWork0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int canproto_do_work0_init(struct canproto_do_work0_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canproto_do_work0_counter_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
